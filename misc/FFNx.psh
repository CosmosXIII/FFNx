#include "shaders/FFNx.fxh"

Texture2D    g_Texture;
SamplerState g_Texture_sampler;
Texture2D    g_Texture_u;
SamplerState g_Texture_u_sampler;
Texture2D    g_Texture_v;
SamplerState g_Texture_v_sampler;

#define isFBTexture g_Constants.VSFlags.z > 0.0
#define isTexture g_Constants.VSFlags.w > 0.0
// ---
#define inAlphaRef g_Constants.FSAlphaFlags.x

#define isAlphaNever abs(g_Constants.FSAlphaFlags.y - 0.0) < 0.00001
#define isAlphaLess abs(g_Constants.FSAlphaFlags.y - 1.0) < 0.00001
#define isAlphaEqual abs(g_Constants.FSAlphaFlags.y - 2.0) < 0.00001
#define isAlphaLEqual abs(g_Constants.FSAlphaFlags.y - 3.0) < 0.00001
#define isAlphaGreater abs(g_Constants.FSAlphaFlags.y - 4.0) < 0.00001
#define isAlphaNotEqual abs(g_Constants.FSAlphaFlags.y - 5.0) < 0.00001
#define isAlphaGEqual abs(g_Constants.FSAlphaFlags.y - 6.0) < 0.00001

#define doAlphaTest g_Constants.FSAlphaFlags.z > 0.0
// ---
#define isFullRange g_Constants.FSMiscFlags.x > 0.0
#define isYUV g_Constants.FSMiscFlags.y > 0.0
#define modulateAlpha g_Constants.FSMiscFlags.z > 0.0
#define isMovie g_Constants.FSMiscFlags.w > 0.0

void main(in PSIn IN, out PSOut OUT)
{
	float4 color = IN.color;
    
    if (isTexture)
    {
        if (isYUV)
        {
            const float4x4 mpeg_rgb_transform = {
                { +1.164, +1.164, +1.164, +0.000 },
                { +0.000, -0.392, +2.017, +0.000 },
                { +1.596, -0.813, +0.000, +0.000 },
                { +0.000, +0.000, +0.000, +1.000 }
            };

            const float4x4 jpeg_rgb_transform = {
                { +1.000, +1.000, +1.000, +0.000 },
                { +0.000, -0.343, +1.765, +0.000 },
                { +1.400, -0.711, +0.000, +0.000 },
                { +0.000, +0.000, +0.000, +1.000 }
            };

            float4 yuv = {
                g_Texture.Sample(g_Texture_sampler, IN.coords.xy).r - (1.0 / 16.0),
                g_Texture_u.Sample(g_Texture_u_sampler, IN.coords.xy).r - 0.5,
                g_Texture_v.Sample(g_Texture_v_sampler, IN.coords.xy).r - 0.5,
                1.0
            };

            if (isFullRange) color = mul(jpeg_rgb_transform, yuv);
            else color = mul(mpeg_rgb_transform, yuv);

            color.a = 1.0f;
        }
        else
        {
            float4 texture_color = g_Texture.Sample(g_Texture_sampler, IN.coords.xy);

            if (doAlphaTest)
            {
                //NEVER
                if (isAlphaNever) discard;

                //LESS
                if (isAlphaLess)
                {
                    if (!(texture_color.a < inAlphaRef)) discard;
                }

                //EQUAL
                if (isAlphaEqual)
                {
                    if (!(texture_color.a == inAlphaRef)) discard;
                }

                //LEQUAL
                if (isAlphaLEqual)
                {
                    if (!(texture_color.a <= inAlphaRef)) discard;
                }

                //GREATER
                if (isAlphaGreater)
                {
                    if (!(texture_color.a > inAlphaRef)) discard;
                }

                //NOTEQUAL
                if (isAlphaNotEqual)
                {
                    if (!(texture_color.a != inAlphaRef)) discard;
                }

                //GEQUAL
                if (isAlphaGEqual)
                {
                    if (!(texture_color.a >= inAlphaRef)) discard;
                }
            }

            if (isFBTexture && all(texture_color.rgb == float3(0.0, 0.0, 0.0))) discard;

            if (isMovie) texture_color.a = 1.0;

            if (texture_color.a == 0.0) discard;

            if (modulateAlpha) color *= texture_color;
            else
            {
                color.rgb *= texture_color.rgb;
			    color.a = texture_color.a;
            }
        }
    }

	OUT.color = color;
}
